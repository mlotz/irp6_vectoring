#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation


#Warning Orocos Reporting component leaves space on last line. Delete it before reading log.(@IndexError: list of index out of range)
f = open('/home/mlotz/orocosPoligon/reports.dat', 'r')
lines = f.readlines()
f.close

timestamp = []
x = []
y = []
z = []
wx = []
wy = []
wz = []


once = 0

for line in lines:
	if (once == 0):
		once = 1
		continue
	p = line.split()
	#print str(p[0])
	timestamp.append(float(p[0]))
	x.append(float(p[1]))
	y.append(float(p[2]))
	z.append(float(p[3]))
	wx.append(float(p[8]))
	wy.append(float(p[9]))
	wz.append(float(p[10]))


tv = np.array(timestamp)
xv = np.array(x)
yv = np.array(y)
zv = np.array(z)
twx = np.array(wx)
twy = np.array(wy)
twz = np.array(wz)

fig1= plt.figure()
plt.plot(tv,yv)
plt.title('x over time', fontsize=20)
plt.xlabel('time[s]')
plt.ylabel('x[m]')
plt.savefig('/home/mlotz/orocosPoligon/plots/xt.png')
fig2= plt.figure()
plt.plot(tv,xv)
plt.title('y over time', fontsize=20)
plt.xlabel('time[s]')
plt.ylabel('y[m]')
plt.savefig('/home/mlotz/orocosPoligon/plots/yt.png')
fig3= plt.figure()
plt.xlabel('time[s]')
plt.ylabel('z[m]')
plt.title('z over time', fontsize=20)
plt.plot(tv,zv)
plt.savefig('/home/mlotz/orocosPoligon/plots/zt.png')

fig3ipol= plt.figure()
plt.xlabel('time[s]')
plt.ylabel('Fxy[N]')
#plt.title('Fxy over time', fontsize=20)
fxy = np.sqrt((twx*twx)+(twy*twy))
#E = np.sum(np.power(fxy[5000:fxy.size]-4.0*np.ones(fxy[5000:fxy.size].size),2))/fxy.size
plt.title('Fxy over time', fontsize=20)
plt.plot(tv,fxy)
plt.savefig('/home/mlotz/orocosPoligon/plots/Fxyt.png')

fig3ipolicwierc= plt.figure()
mem=200
plt.xlabel('time[s]')
plt.ylabel('Fxy[N]')

fxy = np.sqrt((twx*twx)+(twy*twy))
meanfxy = np.array(fxy)
#for index in range(mem,((fxy.size)-mem)):
for index in range(mem,fxy.size):
	meanfxy[index] = np.mean(fxy[index-mem+1:index])
	#ameanfxy.append(np.mean(fxy[index-mem+1:index]))
for index in range(1,mem-1):
	meanfxy[index] = meanfxy[mem]
#meanfxy =  np.array(ameanfxy)	
#print str(4.0 * np.ones(4))
#E = np.sum(np.power(meanfxy[5000:meanfxy.size]-4.0*np.ones(meanfxy[5000:meanfxy.size].size),2))/fxy.size
E = np.sum(np.power(meanfxy[5000:meanfxy.size]-4.0*np.ones(meanfxy[5000:meanfxy.size].size),2))/meanfxy[5000:meanfxy.size].size
plt.title('meanFxy over time E='+str(E), fontsize=20)
plt.plot(tv,meanfxy)
plt.savefig('/home/mlotz/orocosPoligon/plots/meanFxyt.png')

fig4= plt.figure()
plt.xlabel('y[m]')
plt.ylabel('x[m]')
plt.title('end effector trajectory on XY plane', fontsize=20)
plt.axis('equal')
plt.scatter(xv,yv)
plt.savefig('/home/mlotz/orocosPoligon/plots/xyt.png')
#fig1= plt.figure()
#plt.plot(tv,xv)
#plt.plot(tv,yv)
#plt.plot(tv,zv)
#fig2= plt.figure()
#plt.axis('equal')
#plt.scatter(xv,yv)

#plt.show()



